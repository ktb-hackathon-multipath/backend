name: CICD with Gradle

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Download API key from private repository
      uses: actions/checkout@v2
      with:
        repository: ktb-hackathon-multipath/secret
        token: ${{ secrets.TOKEN_GITHUB }}
        path: secret
        fetch-depth: 1

    - name: Copy application.yml file
      run: |
        cp -f secret/application.yml src/main/resources/
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test
      
    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Test SSH connection
      run: ssh -T git@github.com || exit 0

    # Secrets Manager에서 자격 증명 및 기타 값을 가져오기
    - name: Retrieve secrets from AWS
      run: |
        echo "Retrieving secrets from AWS Secrets Manager..."

        # Secrets Manager에서 AWS_ACCESS_KEY와 AWS_SECRET_ACCESS_KEY 가져오기
        SECRETS=$(aws secretsmanager get-secret-value --secret-id ktb-hackathon-multipath --query SecretString --output text)
        AWS_ACCESS_KEY_ID=$(echo $SECRETS | jq -r '.AWS_ACCESS_KEY')
        AWS_SECRET_ACCESS_KEY=$(echo $SECRETS | jq -r '.AWS_SECRET_ACCESS_KEY')

        # SSM Parameter Store에서 DB 관련 값 가져오기
        DB_URL=$(aws ssm get-parameter --name "/multipath/DB_URL" --query "Parameter.Value" --output text)
        DB_USERNAME=$(aws ssm get-parameter --name "/multipath/DB_USERNAME" --query "Parameter.Value" --output text)
        DB_PASSWORD=$(aws ssm get-parameter --name "/multipath/DB_PASSWORD" --with-decryption --query "Parameter.Value" --output text)
        JWT_SECRET_KEY=$(aws ssm get-parameter --name "/multipath/JWT_SECRET_KEY" --with-decryption --query "Parameter.Value" --output text)

        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
        echo "DB_URL=$DB_URL" >> $GITHUB_ENV
        echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
        echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> $GITHUB_ENV

    # EC2에 애플리케이션 배포
    - name: Deploy to EC2
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        DB_URL: ${{ env.DB_URL }}
        DB_USERNAME: ${{ env.DB_USERNAME }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -e

        echo "Uploading JAR file to EC2..."
        scp -i /path/to/private/key build/libs/multipath-backend.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/ec2-user/multipath-backend.jar

        echo "Stopping existing application..."
        pkill -f 'java -jar' || true

        echo "Starting new application..."
        nohup java -jar /home/ec2-user/multipath-backend.jar \
          --spring.profiles.active=dev \
          --DB_URL=${DB_URL} \
          --DB_USERNAME=${DB_USERNAME} \
          --DB_PASSWORD=${DB_PASSWORD} \
          --JWT_SECRET_KEY=${JWT_SECRET_KEY} > /home/ec2-user/multipath-backend.log 2>&1 &

        echo "Deployment completed successfully."
        EOF
