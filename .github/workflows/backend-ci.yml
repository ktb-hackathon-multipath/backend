name: CICD with Gradle

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Download API key from private repository
      uses: actions/checkout@v2
      with:
        repository: ktb-hackathon-multipath/secret
        token: ${{ secrets.TOKEN_GITHUB }}
        path: secret
        fetch-depth: 1
    - name: Create resources directory
      run: mkdir -p src/main/resources

    - name: Copy application.yml file
      run: cp -f secret/application.yml src/main/resources/
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Test SSH connection
      run: ssh -T git@github.com || exit 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Retrieve secrets from AWS SSM Parameter Store
      run: |
        echo "Retrieving secrets from AWS SSM Parameter Store..."
    
        # SSM Parameter Store에서 보안 정보 가져오기 
        DB_URL=$(aws ssm get-parameter --name "/multipath/DB_URL" --query "Parameter.Value" --output text)
        DB_USERNAME=$(aws ssm get-parameter --name "/multipath/DB_USERNAME" --query "Parameter.Value" --output text)
        DB_PASSWORD=$(aws ssm get-parameter --name "/multipath/DB_PASSWORD" --with-decryption --query "Parameter.Value" --output text)
        JWT_SECRET_KEY=$(aws ssm get-parameter --name "/multipath/JWT_SECRET_KEY" --with-decryption --query "Parameter.Value" --output text)

      # Gradle 빌드 단계에서 환경 변수를 직접 사용
    - name: Build with Gradle using SSM values
      run: ./gradlew build -x test \
        -Dspring.datasource.url=${{ steps.db_url.outputs.db_url }} \
        -Dspring.datasource.username=${{ steps.db_username.outputs.db_username }} \
        -Dspring.datasource.password=${{ steps.db_password.outputs.db_password }} \
        -Djwt.secret=${{ steps.jwt_secret.outputs.jwt_secret }}

    # 빌드가 끝난 후 JAR 파일이 존재하는지 확인하는 단계
    - name: Check if JAR file exists
      run: |
        if [ -f build/libs/multipath-backend.jar ]; then
          echo "JAR file exists."
        else
          echo "JAR file does not exist."
          exit 1
        fi

    # EC2에 JAR 파일 업로드 및 애플리케이션 실행
    - name: Upload and deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -e
        echo "Uploading JAR file to EC2..."
        scp build/libs/multipath-backend.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/ec2-user/multipath-backend.jar

        echo "Stopping existing application..."
        pkill -f 'java -jar' || true

        echo "Starting new application..."
        nohup java -jar /home/ec2-user/multipath-backend.jar \
          --DB_URL=${DB_URL} \
          --DB_USERNAME=${DB_USERNAME} \
          --DB_PASSWORD=${DB_PASSWORD} \
          --JWT_SECRET_KEY=${JWT_SECRET_KEY} > /home/ec2-user/multipath-backend.log 2>&1 &

        echo "Deployment completed successfully."
        EOF
