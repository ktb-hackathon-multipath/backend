name: CICD with Gradle

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Download API key from private repository
      uses: actions/checkout@v2
      with:
        repository: ktb-hackathon-multipath/secret
        token: ${{ secrets.TOKEN_GITHUB }}
        path: secret
        fetch-depth: 1
    - name: Create resources directory
      run: mkdir -p src/main/resources

    - name: Copy application.yml file
      run: cp -f secret/application.yml src/main/resources/
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    - name: Build Docker image
      run: docker build -t multipath-backend:latest .

    - name: Save Docker image as tar
      run: docker save -o multipath-backend.tar bami-backend:latest

    - name: Upload Docker image tar to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_BACKEND }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_BACKEND }}
      run: aws s3 cp multipath.tar s3://ktb-hackathon-multipath-backend-s3/path/to/multipath-backend.tar --region ap-northeast-2

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Test SSH connection
      run: ssh -T git@github.com || exit 0

    - name: Deploy to EC2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        set -e  # Exit immediately if a command exits with a non-zero status
        echo "Downloading Docker image tar from S3..."
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_BACKEND }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_BACKEND }}
        aws s3 cp s3://ktb-hackathon-multipath-backend-s3/path/to/multipath-backend.tar /home/ec2-user/multipath-backend.tar --region ap-northeast-2
        echo "Loading Docker image..."
        docker load -i /home/ec2-user/multipath-backend.tar
        echo "Stopping existing Docker container if it exists..."
        docker stop multipath-backend || true
        docker rm multipath-backend || true
        echo "Running new Docker container..."
        docker run -d -p 8080:8080 --name multipath-backend \
          -e DB_URL=$(aws ssm get-parameter --name "/multipath/DB_URL" --query "Parameter.Value" --output text) \
          -e DB_USERNAME=$(aws ssm get-parameter --name "/multipath/DB_USERNAME" --query "Parameter.Value" --output text) \
          -e DB_PASSWORD=$(aws ssm get-parameter --name "/multipath/DB_PASSWORD" --with-decryption --query "Parameter.Value" --output text) \
          -e JWT_SECRET_KEY=$(aws ssm get-parameter --name "/multipath/JWT_SECRET_KEY" --with-decryption --query "Parameter.Value" --output text) \
        multipath-backend:latest
        echo "Deployment completed successfully."
        EOF
    - name: Build with Gradle
      run: ./gradlew build -x test
      shell: bash
